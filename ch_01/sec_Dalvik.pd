Виртуальная машина Dalvik
--------------------------

_Dalvik_ — виртуальная машина (ВМ), отвечающая за запуск Java-программ в Android. Это важная часть
ОС, поскольку больша́я часть системных сервисов, как и приложения, написаны на языке Java. В целях
безопасности каждое приложение запускается в отдельном процессе с собственным экземпляром виртуальной машины, потому
Dalvik был спроектирован таким образом, чтобы в системе могли работать несколько экземпляров ВМ,
расходуя ресурсы эффективно.

Исполняемые файлы приложений имеют расширение `.dex` (в отличие от традиционного для Java `.jar`) и
называются DEX[^1]-файлами. Их формат оптимизирован для мобильных устройств, имеющих, по сравнению
с настольными компьютерами, меньший объем оперативной памяти и места для хранения данных, более
слабые процессоры. В результате оптимизации `.dex`-файл обычно занимает на несколько процентов меньше места, чем
`.jar`-файл для того же приложения[@dalvik-internals].

 [^1]: **D**alvik **EX**ecutable


### Формат DEX ###

При разработке формата DEX главной задачей было устранение дублирования информации.
В каждом DEX-файле содержатся таблицы строк, типов, прототипов методов, описаний полей классов, методов и самих классов.
Это позволяет в дальнейшем ссылаться на конкретную строку, тип, прототип или описание с помощью целочисленного
индекса, являющегося номером строки в соответствующей таблице.

При упаковывании `.class`-файлов в `.jar`-архив данные, содержащиеся в этих файлах, не объединяются.
Поскольку нередко строки и классы (в особенности, системные) упоминаются в нескольких `.class`-файлах
одного приложения, утилита `dx`, предназначенная для создания DEX-файлов, объединяет данные из всех `.class`-файлов,
и таким образом обеспечивается отсутствиие избыточности.


### Регистровая архитектура ###

Самое главное отличие Dalvik от классической JVM заключается в том, что Dalvik — регистровая машина, в то
время как JVM — стековая. Трудно однозначно сказать, какой подход лучше, но исследования в этой области показывают,
что для одного и того же приложения в случае регистровой архитектуры будет исполнено на 47% меньше инструкций[@vm-showdown].
В то же время, объем кода обычно оказывается на 25% больше[@vm-showdown]. При выборе регистровой архитектуры разработчики
Android руководствовались собственными экспериментами, которые показали, что при интерпретации регистрового кода
будет обработано меньше инструкций и совершено меньше обращений к памяти[@dalvik-internals].
