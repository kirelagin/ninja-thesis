## Эмуляция разделяемой памяти с использованием веб-воркеров ##

Поскольку несколько воркеров не могут иметь одно адресное пространство, возникает
необходимость в выделенном воркере, который будет управлять «памятью» всей системы.
Роль такого воркера-«менеджера памяти» заключается в том, чтобы хранить все данные
и предоставлять к ним доступ остальным воркерам по запросу.

В некотором смысле этот воркер-менеджер может рассматриваться как аналог
контроллера оперативной памяти. В классических архитектурах процессор взаимодействует
с контроллером памяти для предоставления программам доступа к хранимым данным, а
в представленной реализации виртуальной машины «процессор» ВМ (функция, отвечающая за
интерпретацию инструкций) взаимодействует с воркером-менеджером.

Взаимодействие построено следующим образом: если исполняется инструкция, которой
необходим доступ к общей памяти, то:

 1. воркер отправляет сообщение осуществляющему управление памятью воркеру;
 2. выполнение потока приостанавливается в ожидании ответа;
 3. менеджер памяти обрабатывает пришедший запрос и отправляет
    ответ с запрошенными данными (к примеру, если выполняется операция чтения), либо
    просто подтверждение выполнения операции (для операций записи);
 4. после получения ответа исполнение потока возобновляется.

Допустим, какому-то потоку для синхронизации требуется захватить
монитор некоторого объекта (инструкция `monitor-enter`).
Он отправляет менеджеру соответствующее сообщение со ссылкой на объект и
приостанавливается до получения ответа. Менеджер добавляет поток в очередь желающих
захватить монитор этого объекта. Как только подходит черед рассматриваемого потока,
менеджер отправляет ему сообщение с подтверждением успешного выполнения операции и
поток возобновляется. Закончив работу с объектом, поток,
чтобы отпустить монитор (`monitor-exit`), отправляет менеджеру
соответствующее сообщение и, получив подтверждение, продолжает исполнение.

Важно отметить, что все сообщения обрабатываются в порядке получения. Тот факт, что
любое производимое потоком изменение в системе, способное оказать влияние на
другие потоки, сопровождается отправкой сообщения менеджеру и приостановлением
потока до получения ответа, гарантирует сохранение требуемого моделью
памяти языка Java порядка _happens-before_.
