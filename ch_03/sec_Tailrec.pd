## Continuation-passing style и хвостовая рекурсия ##

Continuation-passing style чаще всего используется в функциональных языках программирования.
Отличительной чертой функциональных языков программирования является то, что большинство
компиляторов (интерпретаторов) таких языков обеспечивают оптимизацию хвостовой рекурсии (tail call elimination).

Интерпретатор JavaScript хвостовую рекурсию не оптимизирует, что при активном использовании CPS приводит
к переполнениям стека. Код, использующий продолжения, обычно не содержит циклов, а вместо этого используются
рекурсивные вызовы; в случае виртуальной машины это приводит к необходимости осуществлять
рекурсивный вызов для интерпретации каждой следующей инструкции (\autoref{lst:interpret}), то есть
глубина стека растет довольно быстро.


\begin{code}[language=Pseudo,label=lst:interpret,
                   caption={Функция, интерпретирующая инструкции виртуальной машины при использовании continuation-passing style (псевдокод)}]
interpret = function(index=0, continuation):
    jump = function(new_index):
        interpret(new_index, continuation)
    next = function()
        jump(index + 1)

    switch instructions[index]:
        case ...:
            ...
            next()
        case ...:
            ...
            next()
        case ...:
            ...
            jump(...)
        ...
\end{code}


Для обхода этой проблемы первоначально планировалось использовать
следующий трюк. При каждом вызове функции проверяется, не достигла ли глубина стека некоторой
критической величины; если достигла, то необходимо стек очистить. Похожий подход впервые был
использован в компиляторе языка Scheme под названием Chicken[@chicken]. Компилятор Scheme
работает на низком уровне, что позволяет напрямую манипулировать стековыми кадрами.

В языке JavaScript получить прямой доступ к стеку невозможно, но вместо этого можно использовать
встроенную функцию `setTimeout`, изначально предназначенную для того, чтобы вызвать
некоторую функцию спустя определенный промежуток времени. Эта функция запускает
таймер, при срабатывании которого в очередь на обработку добавляется событие, обработка которого
приводит к выполнению заданной функции. Если необходимо очистить стек, то вместо очередного
вызова функции осуществляется вызов `setTimeout`, а в качестве аргументов передаются
`0` (что означает «добавить событие в очередь немедленно») и продолжение, которое вызовет
требуемую функцию. Затем текущая функция возвращается.

Так же, как в предыдущем разделе, передача управления предыдущей функции в стеке
приводит в «раскручиванию» (и, как следствие, очистке) стека вызовов, а затем из очереди
событий извлекается событие, добавленное вызовом `setTimeout`, обработка которого приведет
к возобновлению программы, но уже с пустым стеком.

К сожалению, на практике такой способ проявил себя не очень хорошо. Дело в том, что, к примеру,
в браузере Chromium минимальный интервал для `setTimeout` равен 1\ мс[@chromium-issue888].
Более того, в текущей черновой версии стандарта HTML5 указано, что этот интервал должен составлять
не менее 4\ мс[@html5], так что можно ожидать, что в скором времени и в Chromium, и в других браузерах
минимальный интервал `setTimeout` будет увеличен до требуемого стандартом.
К примеру, если исходная программа на Java выполняла миллион итераций цикла `for`, а стек
«раскручивается» каждые 100 рекурсивных вызовов, то только лишь на «раскручивание», будет затрачено
несколько секунд.

Для тестирования производительности видится разумным проводить сравнение с реальным смартфоном,
поскольку это позволит лучше понять, насколько критичным окажется падение производительности
приложений относительно того, с чем пользователи работают в реальной жизни.
В \inlref{таблице}{tbl:unwind} приведено время работы
подобной программы в стандартной реализации Dalvik на смартфоне HTC\ Gratia (HTC\ liberty) и
в веб-браузере Google Chrome 27, запущенном на ноутбуке с процессором Intel C2D U9400,
с применением описываемого способа очистки стека.


\begin{table}[ht]
\centering
\caption{Сравнение времени работы программы,
         совершающей некоторое число итераций цикла \lstinline!for!,
         в различных реализациях виртуальной машины Dalvik}
\label{tbl:unwind}
\begin{tabular}{|r|l|l|}
\hline
\multirow{2}{*}{Число итераций}     & \multicolumn{2}{c|}{Время работы, мс}                     \\ \cline{2-3}
                                    &   HTC liberty       &   JavaScript      \\ \hline %*
 1\,000                             &   0                 &   ?               \\ \hline
 10\,000                            &   2                 &   4\,431          \\ \hline
 100\,000                           &   36                &   44\,426         \\ \hline
 1\,000\,000                        &   390               &   --              \\ \hline
 10\,000\,000                       &   3\,930            &   --              \\
\hline
\end{tabular}
\end{table}


Из приведенных выше расчетов следует, что добавляемый браузером таймаут увеличивает время работы
приблизительно на 4 секунды для программы, выполняющей сто тысяч итераций цикла (сто тысяч итераций,
каждая состоит из четырех инструкций, стек очищается на каждый сотый рекурсивный вызов —
$10^5 \cdot 4 / 100 \cdot 1\text{\ мс} = 4000\text{\ мс}$). Тем не менее, программа выполняется за 44 секунды, на
40 секунд больше.
Профилирование показывает, что 97% всего времени уходит на осуществление служебных операций
движка JavaScript, к которым относятся, в том числе, вызовы функций и работа с очередью событий.

Из изложенного можно сделать два важных вывода:

 1. Предотвращение переполнения стека с помощью `setTimeout` действительно работает, но занимает
    недопустимо много времени.
 2. Использование рекурсивных вызовов вместо циклов оказывает достаточно
    сильное негативное влияние на общую производительность системы.
