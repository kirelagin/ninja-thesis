Инструменты
------------

Динамическая натура языка JavaScript делает его идеальным средством быстрой разработки
небольших скриптов, взаимодействующих с пользователями веб-сайта. Однако, она же
существенно затрудняет разработку больших проектов, состоящих из нескольких модулей,
и заметно увеличивает время, затрачиваемое на поиск и исправление ошибок.

Была рассмотрена возможность использования C++ в качестве основного языка разработки,
с последующей трансляцией кода в JavaScript с помощью Emscripten[@emscripten]. Такой
подход обладает рядом преимуществ:

 * C++ — статически типизированный язык, следовательно некоторые ошибки могут быть
   выявлены на этапе компиляции;
 * C++ — очень распространненый язык, хорошо знакомый автору работы;
 * виртуальная машина Dalvik написана на C++, это позволило бы заимствовать
   фрагменты кода из существующей реализации.

К сожалению, язык C++ обладает рядом недостатков, таких как:

 * низкоуровневость;
 * слабая типизация;
 * недостаточная выразительность.

Будучи довольно низкоуровневым языком программирования, C++ не позволил бы в полной мере
использовать возможности JavaScript, многое пришлось бы реализовывать вручную. В
результате сложность и объем проекта слиьно возрасли бы по сравнению с
реализацией на JavaScript (исходный код Dalvik состоит из нескольких сотен тысяч строк).

В качестве основного языка программирования был выбран _F#_, не имеющий перечисленных
выше проблем. Наоборот, он:

 * достаточно высокоуровневый;
 * статически типизирован;
 * обладает сильной системой типов;
 * осуществляет автоматический вывод типов;
 * близок к JavaScript по возможностям и выразительности.

Для последующей трансляции F# кода в JavaScript используется WebSharper[@websharper].
WebSharper содержит полную реализацию стандартной библиотеки F# на языке
JavaScript, а также предоставляет доступ к библиотекам, доступным
только в JavaScript, в том числе, к новым API из стандарта HTML5, что несколько
упростило код виртуальной машины.
