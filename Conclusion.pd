\likechapter{Заключение}

В работе была реализована виртуальная машина, в значительной степени
бинарно совместимая с виртуальной машиной Dalvik,
входящей в операционную систему Android.
Особенностью данной виртуальной машины является то, что
её исходный код компилируется в программу на языке программирования
JavaScript и исполняется в веб-браузере, что позволит в будущем
запускать в браузере приложения, предназначенные для платформы Android.

В частности, реализованы следующие компоненты ВМ:

 * парсер формата DEX;
 * подсистема примитивных типов;
 * инфраструктура для работы с объектами Java;
 * интерпретатор байткода Dalvik.

Некоторые возможности Dalvik, не требуемые для исполнения
большинства несложных программ, на данный момент не поддерживаются,
поскольку их реализация не представляла интереса с точки зрения
исследования, но потребовала бы значительных временны́х затрат. К таким
возможностям относятся: Java Reflections, аннотации, обработка исключений.

В проекте активно используются нововведения последних версий стандарта HTML,
доступные, по состоянию на сегодняшний день, лишь в браузере Chromium
(и производных от него, в том числе Google Chrome). Было показано, что
использование возможностей HTML5 позволяет заметно сократить
объем написанного кода.

Для обеспечения работы многопоточных приложений использована технология
Web Workers. Проведенные тесты продемонстрировали преимущества, такого
подхода при запуске на многопроцессорных (многоядерных) компьютерах.
Для обхода архитектурных ограничений веб-воркеров, не позволяющих потоку
получать доступ к памяти других потоков напрямую, посредством обмена
сообщениями была сэмулирована необходимая Java-приложениям модель памяти.
К сожалению, наблюдается существенное падение производительности,
если приложение активно работает с объектами, расположенными в
динамически выделяемой памяти.

Отличительной чертой данного проекта является использование в качестве
основного инструмента разработки функционального языка программирования F♯, что
в сочетании с активным применением парадигмы программирования, известной как
continuation-passing style, и классических приемов функционального программирования,
положительно сказалось на простоте написания и читаемости кода.
